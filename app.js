// Generated by CoffeeScript 1.10.0
(function() {
  var Config, Post, app, bodyParser, bookshelf, compile, express, knex, nib, stylus;

  express = require('express');

  stylus = require('stylus');

  nib = require('nib');

  Config = require('./config');

  knex = require('knex')(Config);

  bookshelf = require('bookshelf')(knex);

  app = express();

  bodyParser = require('body-parser');

  app.use(bodyParser.urlencoded({
    extended: true
  }));

  app.use(bodyParser.json());

  compile = function(str, path) {
    return stylus(str).set('filename', path).use(nib());
  };

  app.set('views', __dirname + '/views');

  app.set('view engine', 'jade');

  app.use(stylus.middleware({
    src: __dirname + '/public',
    compile: compile
  }));

  app.use(express["static"](__dirname + '/public'));

  Post = require("./models/post");

  app.get('/', function(req, res) {
    return Post.forge().fetch().then(function(collection) {
      if (collection != null) {
        res.json({
          error: false,
          data: collection.toJSON()
        });
      }
      return res.json({
        error: true,
        data: 'object not found'
      });
    })["catch"](function(err) {
      return res.status(500).json({
        error: true,
        data: {
          message: err.message
        }
      });
    });
  });

  app.get('/:id', function(req, res) {
    return Post.forge({
      id: req.params.id
    }).fetch().then(function(collection) {
      if (collection != null) {
        res.json({
          error: false,
          data: collection.toJSON()
        });
      }
      return res.json({
        error: true,
        data: 'object not found'
      });
    })["catch"](function(err) {
      return res.status(500).json({
        error: true,
        data: {
          message: err.message
        }
      });
    });
  });

  app.post('/', function(req, res) {
    return Post.forge({
      title: req.body.title,
      html: req.body.post
    }).save().then(function(post) {
      return res.json({
        error: false,
        data: post.toJSON(),
        message: "post saved"
      });
    })["catch"](function(err) {
      return res.status(500).json({
        error: true,
        data: {
          message: err.message
        }
      });
    });
  });

  app.put('/:id', function(req, res) {
    return Post.forge({
      id: req.params.id,
      title: req.body.title,
      html: req.body.post
    }).save().then(function(post) {
      return res.json({
        error: false,
        data: post.toJSON(),
        message: "post update"
      });
    })["catch"](function(err) {
      return res.status(500).json({
        error: true,
        data: {
          message: err.message
        }
      });
    });
  });

  app["delete"]('/:id', function(req, res) {
    return Post.forge({
      id: req.params.id
    }).destroy().then(function() {
      return res.json({
        error: false,
        message: "post deleted"
      });
    })["catch"](function(err) {
      return res.status(500).json({
        error: true,
        data: {
          message: err.message
        }
      });
    });
  });

  app.listen(3000);

}).call(this);

//# sourceMappingURL=app.js.map
