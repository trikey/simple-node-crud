// Generated by CoffeeScript 1.10.0
(function() {
  var Config, Schema, action, createTable, createTables, dropTable, dropTables, knex, ref, sequence, sugarjs;

  Config = require('./config');

  knex = require('knex')(Config);

  Schema = require('./schema');

  sequence = require('when/sequence');

  sugarjs = require('sugar');

  createTable = function(tableName) {
    return knex.schema.createTable(tableName, function(table) {
      var column, columnKeys;
      column = 0;
      columnKeys = Object.keys(Schema[tableName]);
      return columnKeys.forEach(function(key) {
        var item;
        item = Schema[tableName][key];
        if (item.type === 'text' && 'fieldtype' in item) {
          column = table[item.type](key, item.fieldtype);
        } else if (item.type === 'string' && 'maxlength' in item) {
          column = table[item.type](key, item.maxlength);
        } else {
          column = table[item.type](key);
        }
        if ('nullable' in item && item.nullable === true) {
          column.nullable();
        } else {
          column.notNullable();
        }
        if ('primary' in item && item.primary === true) {
          column.primary();
        }
        if ('unique' in item && item.unique) {
          column.unique();
        }
        if ('unsigned' in item && item.unsigned) {
          column.unsigned();
        }
        if ('references' in item) {
          column.references(item.references);
        }
        if ('defaultTo' in item) {
          return column.defaultTo(item.defaultTo);
        }
      });
    });
  };

  dropTable = function(tableName) {
    return knex.schema.dropTable(tableName);
  };

  createTables = function() {
    var tableNames, tables;
    tables = [];
    tableNames = Object.keys(Schema);
    tables = tableNames.map(function(tableName) {
      return function() {
        return createTable(tableName);
      };
    });
    return sequence(tables);
  };

  dropTables = function() {
    var tableNames, tables;
    tables = [];
    tableNames = Object.keys(Schema);
    tables = tableNames.map(function(tableName) {
      return function() {
        return dropTable(tableName);
      };
    });
    return sequence(tables);
  };

  action = (ref = process.argv[3]) != null ? ref : 'nothing';

  if (action === "createtables") {
    createTables().then(function() {
      console.log('Tables created!!!');
      return process.exit(0);
    }).otherwise(function(error) {
      throw error;
    });
  } else if (action === "droptables") {
    dropTables().then(function() {
      console.log('Tables droped!!!');
      return process.exit(0);
    }).otherwise(function(error) {
      throw error;
    });
  } else {
    process.exit(0);
  }

}).call(this);

//# sourceMappingURL=migrate.js.map
